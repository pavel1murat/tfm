#+startup:fold
* TFM : the Trigger Farm Manager                                             
- initially forked from the ARTDAQ artdaq_daqinterface
- goals : 
  - reduce the number of transitions
  - reduce the transition times
  - encode the run number into the filenames
  - get rid of symlinks in the logfile naming
  - make sure that the server can provide any diagnostics information which is needed
  - split running configurations from the farm manager scripts themselves
  - provide troubleshooting information and the metrics of the farm performance
  - integrate with MIDAS as a frontend client

- NOTE: at this point, significant part of the documentation below
  is in a "work in progress" state, feel free to improve and commit back

* ------------------------------------------------------------------------------
* [[file:./communication_with_artdaq.org][communication with artdaq]]
* configuration                                                              
** the TFM configuration is defined in ODB subtree /Mu2e/ActiveRunConfiguration/DAQ/Tfm
1) .FCL files of the ARTDAQ jobs: 

- long term: created starting from ODB
- one FCL file ber component
  - boardreaders  : brXX.fcl, for example br01.fcl
  - event builders: ebXX.fcl, for example eb01.fcl
  - data loggers  : dlXX.fcl, for example dl01.fcl
  - dispatchers   : dsXX.fcl, for example ds01.fcl

[[file:../rc/control/farm_manager.py::/def check_hw_fcls/]]

see self.get_config_info() there 

- after being copied, the files are checked for being unique 
  not sure how one can make such a mistake

- also what are multiple subconfigurations ?
*** internally, the configuration dir is $TFM_CONF/$config_name
* [[file:./dqm.org][DQM]]
* [[file:environment_variables.org][environment variables]]                                                      
* error codes                                                                
- 140: 
* [[file:../rc/control/farm_manager.py][farm_manager.py]]: server managing the trigger farm                          
** command line parameters                                                   
|------------------+--------------------------+------+---------+--------------------------------------------------------------------|
| flag             | description              | Type | default | comment                                                            |
|------------------+--------------------------+------+---------+--------------------------------------------------------------------|
| -c, --config-dir | defined config directory | str  | None    | contains all configuration files, has to be defined                |
|                  |                          |      |         | on the command line. Last config-dir path component (subdirectory) |
|                  |                          |      |         | is the configuration name                                          |
|------------------+--------------------------+------+---------+--------------------------------------------------------------------|

- example: (before running the farm_manager.py, make sure that $MRB_TOR/config/$configuration
  directory containes all needed files - see 
#+begin_src                                                                  
runconf=vst_001
partition=8
source tfm_configure $runconf $partition
$TFM_DIR/rc/control/farm_manager.py --config-dir=$MRB_TOR/config/$runconf
#+end_src
** farm management methods                                                   
  management methods ("direct", "pmt", "external_run_control") are defined in 
   [[file:../rc/control/farm_manager.py::/process_management_methods/]]
** Comments                                                                  
   -- env['ARTDAQ_PARTITION_NUMBER'] is set by [[file:../bin/tfm_configure][tfm_configure]] and used by TFM

   -- the TFM port number = 10000+1000*partition_number, no need to improvise

   -- the configuration dir could be anywhere, and TFM should not be 
      making assumptions about it

   -- after sourcing the [[file:../bin/tfm_configure][tfm_configure]] script, only need to specify the configuration directory 
      (when debugging a given configuration, may want to create a copy)
* interaction with the Postgres DB                                           
- if /Mu2e/RunConfigurations/$config_name/UseDBRunInfo is set to "yes" , 
  the MIDAS sequencer requests the new run number from the PG and stores it in ODB
  the [[file:../../frontends/tfm_frontend/tfm_launch_fe.cc][tfm_launch_fe]] then passes that to ARTDAQ and records all transitions

- MIDAS, via MSL, executes script [[file:../../frontends/tfm_frontend/get_next_run_number.sh]] 
  which returns the next run number to /Sequencer/Variables/SCRIPT_RESULT 

- here is the MSL script
#+begin_src
# -*- mode:text -*-
#------------------------------------------------------------------------------------
# last step before starting a run
# get next run number from the run info DB. 
# get_next_run_number is an executable which gets the run number from Postgresql and updates 
# the run number in ODB
# for example, the end_run would write into the ODB some flag, w/o which one couldn't start the run 
#------------------------------------------------------------------------------------
script get_next_run_number
#+end_src

- [[file:../../frontends/tfm_frontend/get_next_run_number.cc]] gets compiled into 
  the executable interacting with the DB via a clone of Antonio's code - 
  see [[file:../../frontends/tfm_frontend/db_runinfo.hh]]

- comment: this is the first iteration, the code should be cleaned up

* log file naming                                                            
  [[file:../rc/control/farm_manager.py::/def determine_logfilename/]]

  log file names defined during the boot transition 
  -- do_boot
     -- get_artdaq_log_filenames
        -- determine_logfilename

  -- logfiles are created at boot step, on my laptop/docker this step for config='demo'
     took from 00:07:53 to 00:09:03, out of that:
  -- 38 sec - not sure what
  -- 10 sec - check of the setup script
  -- 19 sec - launch of the artdaq processes
  --  2 sec - associating log files

  self.launch_attempt_files[p.host] : PMT log file (used in manage_processes_direct.py
  
- all art processes have their COUT redirected to the PMT log file
- however, messages by message_facility go into individual log files, one per art process
* open port map                                                              
  - from daq13, can use port 18000 to talk to daq09                          
  mu2etrk@mu2edaq13:~/test_stand/pasha_020>xmlrpc http://mu2edaq09.fnal.gov:18000/RPC2 get_state daqint
Result:

String: 'stopped:100'

* [[file:available_configurations.org][available_configurations]]                                                               
* TFM command line scripts                                                   
** [[file:../bin/tfm_configure][tfm_configure]] : setup active artdaq configuration
** tfm_transition                                                            
- handles transitions: config, start, stop, 
- doesn't handle yet: pause, resume, shutdown
#+begin_src
mu2etrk@mu2edaq09:~/test_stand/pasha_020>tfm_transition stop
[tfm_transition:7] : parameters:stop
[tfm_transition:96] full_cmd=xmlrpc http://localhost:18000/RPC2 state_change daqint stopping 'struct/{ignored_variable:i/999}'
Result:

Nil
#+end_src
** artdaq_process_info.sh                                                    
- call signature:
#+begin_src
      artdaq_process_info.sh [partition]
#+end_src
- if partition is specified, it is used to determine the communication port number 
- otherwise, the value of $TFM_PARTITION is used

** tfm_status (obsolete)                                                     
- returns old state w/o completion                            
** [[file:../bin/tfm_get_status][tfm_get_status]]                                                            
- returns status of the farm (with completion percentage for transisitons)
- stable states always report completion at 100%, i.e. 'running:100'
- perhaps, rewrite in python to parse
#+begin_src
mu2etrk@mu2edaq09:~/test_stand/pasha_020>tfm_get_status
'configured:100'
#+end_src
** [[file:../bin/tfm_shutdown][tfm_shutdown]] : stops all processes, shuts down the farm, stops the TFM    
* TFM transitions                                                            
- defined in [[file:../bin/tfm_transition]]                                      
- commands are translated, and sent to the TF server are the translated commands. 
- "translated" commands are different from the original ones by "ing" 
- what is it? a linquistic exersize of defining gerunds ?
|-----------+--------------------+---------------+----------------------------------|
| command   | translated command | XMLRPC string | comment                          |
|-----------+--------------------+---------------+----------------------------------|
| boot      | booting            |               | obsolete, performed upon startup |
| config    | configuring        |               |                                  |
| start     | starting           |               |                                  |
| enable    | enabling           |               | obsolete                         |
| disable   | disabling          |               | obsolete                         |
| stop      | stopping           |               |                                  |
| shutdown  | shutting           |               | included into stop               |
| terminate | terminating        |               | obsolete                         |
|-----------+--------------------+---------------+----------------------------------|

1) TFM assumes that all config files , including FCLs are located in a directory 
provided to it at a startup , so the rest transitions do not really need a configuration
parameter
2) startup executed old boot
3) run number is specified at old config
4) new start doesn't execute old config - config should be a separate step , 
   as there are multiple subsystems, and at 'configured' all shoudl be ready to run
5) stop is stop, after stop - either configure or shutdown
6) at 'shutdown', the farm manager exits, requiring a new start
* types of artdaq components                                                 
  BoardReader, EventBuilder, DataLogger, Dispatcher, RoutingManager
  - as follows from the names, an artdaq component is a job with a given functionality
  - components can run on the same or different nodes
  - components can talk to each other via XML-RPC 
  - components can be combined into subsystems, by default there is only one subsystem

** at startup, TFM goes directly into a 'booted' state                       
- 'config' and 'start' are merged into 'start'
- 'config' step defines new run number and configures the farm for that
- stop actually stops the processes
- stable states  : 'initialized', 'running', 'paused', 'stopped'
- commands: Init , Start, Pause, Resume, Stop, Shutdown
- transition commands sent by [[file:../bin/tfm_transition][tfm_transition]]
  - boot,
  - config
  - start :
    - if run number is not defined, use next one to the last found
    - if run number is defined, use that, send "starting struct/{run_number:i/$rn}"
  - enable
  - disable
  - stop
  - terminate
* [[file:xmlrpc.org][XMLRPC]]                                                                     
* ------------------------------------------------------------------------------
* [[file:work_in_progress.org][work_in_progress and TODO items]]
* ------------------------------------------------------------------------------
* attic                                                                      
** [[file:artdaq_daqinterface.org]]
* ------------------------------------------------------------------------------
