#+startup:fold -*- buffer-read-only:t -*- 
* ------------------------------------------------------------------------------
* information on XMLRPC                                                      
** checkout code                                                             
svn checkout http://svn.code.sf.net/p/xmlrpc-c/code/stable xmlrpc-c

** https://www.xml.com/pub/a/2001/10/29/xmlrpc.html - the most useful link   
- snippet which creates a struct 
- array uses round brackets
#+begin_src
result = xmlrpc_client_call( &env,
                             url,
                             "some_func",
                             "({s:i,s:i})",
                             "my great argument", 1,
                             "my next argument",  2
                           )
#+end_src
** https://xmlrpc-c.sourceforge.io/doc/xmlrpc.html
** http://xmlrpc.com/         
** RPC2 manual: http://www.coda.cs.cmu.edu/doc/html/rpc2_manual.html
** code examples: https://xmlrpc-c.sourceforge.io/example-code.php
** TFM XMLRPC commands                                                       
*** status                                                                   
xmlrpc http://localhost:$TFM_PORT/RPC2 state daqint
xmlrpc http://mu2edaq09-ctrl.fnal.gov:21000/RPC2 get_state daqint
*** configure                                                                
xmlrpc http://mu2edaq09-data.fnal.gov:23000/RPC2 state_change daqint configuring struct/{run_number:i/105391}
*** start                                
*** stop
*** shutdown                                                                 
xmlrpc http://mu2edaq09-yyyy.fnal.gov:23000/RPC2 shutdown daqint
** Python example (stolen from the web)                                      
----- server
#+begin_src
#!/usr/bin/env python
from xmlrpc.server import SimpleXMLRPCServer
from xmlrpc.server import SimpleXMLRPCRequestHandler
class RequestHandler(SimpleXMLRPCRequestHandler):
   rpc_paths = ('/RPC2',)
with SimpleXMLRPCServer((xxx-yyyy.fnal.gov', 21000),
                        requestHandler=RequestHandler) as server:
   server.register_introspection_functions()
   # Register len() function;
   server.register_function(len)
   # Register a function under a different name
   @server.register_function(name='rmndr')
   def remainder_function(x, y):
      return x // y
   # Register a function under function.__name__.
   @server.register_function
   def modl(x, y):
      return x % y
   server.serve_forever()
#+end_src
------------ client
#+begin_src
#!/usr/bin/env python
# examples :
# xmlrpc http://xxx-yyyy.fnal.gov:21000/RPC2 len aaa
# xmlrpc http://xxx-yyyy.fnal.gov:21000/RPC2 rmndr i/12 i/5
# xmlrpc http://xxx-yyyy.fnal.gov:21000/RPC2 modl i/7 i/3
# xmlrpc http://xxx-yyyy.fnal.gov:21000/RPC2 system.listMethods
#------------------------------------------------------------------------------
import xmlrpc.client
s = xmlrpc.client.ServerProxy('http://xxx-yyyy.fnal.gov:21000')
print(s.len("Tutorialspoint"))
print(s.rmndr(12,5))
print(s.modl(7,3))
# Print list of available methods
print(s.system.listMethods())
#+end_src
** examples of querying the artdaq processes' stats from the command line    
#+begin_src
mu2etrk@mu2edaq22:~/test_stand/pasha_031>xmlrpc http://mu2edaq22.fnal.gov:21101/RPC2 daq.report stats
Result:

String: 
  br01 run number = 105463, Sent Fragment count = 63206, br01 statistics:\n
    Fragments read: 20002 fragments generated at 333.309 getNext calls/sec, fragment rate = 333.342 fragments/sec, monitor window = 60.0044 sec, min::max read size = 1::2 fragments Average times per fragment:  elapsed time = 0.00300022 sec\n
    Fragment output statistics: 20002 fragments sent at 333.342 fragments/sec, effective data rate = 4.52292 MB/sec, monitor window = 60.0044 sec, min::max event size = 3.8147e-05::0.017746 MB\n
    Input wait time = 0.00298406 s/fragment, buffer wait time = 2.3705e-06 s/fragment, request wait time = 0.00298346 s/fragment, output wait time = 1.72183e-06 s/fragment\n
  fragment_id:0 nfragments:1 nbytes:12464 max_nf:1000 max_nb:1048576000
mu2etrk@mu2edaq22:~/test_stand/pasha_031>xmlrpc http://mu2edaq22.fnal.gov:21201/RPC2 daq.report stats
Result:

String: 
  eb01 statistics:\n
    Event statistics: 20200 events released at 336.643 events/sec, effective data rate = 4.58106 MB/sec, monitor window = 60.0043 sec, min::max event size = 0.00899506::0.0177841 MB\n
    Average time per event:  elapsed time = 0.00297051 sec\n
    Fragment statistics: 20200 fragments received at 336.643 fragments/sec, effective data rate = 4.56822 MB/sec, monitor window = 60.0043 sec, min::max fragment size = 0.00895691::0.017746 MB\n
    Event counts: Run -- 108600 Total, 0 Incomplete.  Subrun -- 0 Total, 0 Incomplete. \n
  shm_nbb :250:1153440:250:0:0:0\n
mu2etrk@mu2edaq22:~/test_stand/pasha_031>xmlrpc http://mu2edaq22.fnal.gov:21301/RPC2 daq.report stats
Result:

String: 
  dl01 statistics:\n
    Event statistics: 20000 events released at 333.308 events/sec, effective data rate = 4.8357 MB/sec, monitor window = 60.0045 sec, min::max event size = 0.00989532::0.0186844 MB\n
    Average time per event:  elapsed time = 0.00300023 sec\n
    Fragment statistics: 20000 fragments received at 333.308 fragments/sec, effective data rate = 4.82298 MB/sec, monitor window = 60.0045 sec, min::max fragment size = 0.00985718::0.0186462 MB\n
    Event counts: Run -- 115200 Total, 0 Incomplete.  Subrun -- 0 Total, 0 Incomplete. \n
  shm_nbb :250:1153440:250:0:0:0\n
mu2etrk@mu2edaq22:~/test_stand/pasha_031>xmlrpc http://mu2edaq22.fnal.gov:21401/RPC2 daq.report stats
Result:

String: 
  ds01 statistics:\n
    Event statistics: 20200 events released at 336.642 events/sec, effective data rate = 4.95845 MB/sec, monitor window = 60.0044 sec, min::max event size = 0.00865173::0.0189056 MB\n
    Average time per event:  elapsed time = 0.00297052 sec\n
    Fragment statistics: 20200 fragments received at 336.642 fragments/sec, effective data rate = 4.94561 MB/sec, monitor window = 60.0044 sec, min::max fragment size = 0.00861359::0.0188675 MB\n
    Event counts: Run -- 137598 Total, 0 Incomplete.  Subrun -- 0 Total, 0 Incomplete. \n
  shm_nbb :250:1153440:0:0:250:0\n
m#+end_src

** example of a command line query of the TFM                                
- however, doesn't work (as expected) with the URL specified as "http://mu2edaq22.fnal.gov:21000/RPC2"
#+begin_src
mu2etrk@mu2edaq22:~/test_stand/pasha_031>xmlrpc http://mu2edaq22-ctrl.fnal.gov:21000/RPC2  get_state  daqint
Result:

String: 'running:100'
mu2etrk@mu2edaq13:~/test_stand/pasha_031>xmlrpc http://mu2edaq22-ctrl.fnal.gov:21000/RPC2 get_state daqint 
Result:

String: 'stopped:100'
mu2etrk@mu2edaq09:~/test_stand/daquser_001>xmlrpc http://mu2edaq09.fnal.gov:21000/RPC2  get_messages  daqint
Result:

String: 
  info:br02:TrackerBRDR::getNext: 1\n
  info:br01:TrackerBRDR::getNext: 1
#+end_src
* ------------------------------------------------------------------------------
* back to [[file:tfm.org]]
* ------------------------------------------------------------------------------
